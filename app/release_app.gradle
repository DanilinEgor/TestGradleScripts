task('buildReleaseApk', dependsOn: 'assembleRelease')

buildReleaseApk.mustRunAfter clean

task('fabric', dependsOn: ['clean', 'buildReleaseApk']) {
    doLast {
        println "Built and uploaded to Fabric"
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

def calculateVersionName() {
    def version = readVersionProperties()
    "${version['major']}.${version['hotfix']}"
}

def gitCreateReleaseBranch() {
    def releaseVer = calculateVersionName()
    def branch = "release-" + releaseVer
    def proc = ("git checkout -b " + branch).execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = ("git push -u origin " + branch).execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
}

def gitPushVersionToMaster() {
    def proc = "git add app/version.properties".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = ("git commit -m \"Version " + calculateVersionName() + "\"").execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    proc = "git push origin master".execute()
    proc.in.eachLine { line -> println line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
}

def gitCheckCleanBranch() {
    def clean = true
    def proc = "git status --porcelain".execute()
    proc.in.eachLine { line -> clean = false }
    proc.waitFor()
    clean
}

task('new_branch') << {
    println "called new branch"
    gitCreateReleaseBranch()
}

task('new_release') << {
//    def branchIsClean = gitCheckCleanBranch()
//    if (branchIsClean) {
        def branch = gitBranch()
        println("branch is " + branch)
        if (branch == "master") {
            incrementMajorNumber()
            gitPushVersionToMaster()
            gitCreateReleaseBranch()
        } else {
            println "Error: Not in master branch!"
        }
//    } else {
//        println "Error: branch is not clean!"
//    }
}

ext {
    versionFile = new File(project.rootDir.absolutePath + "/app/version.properties")
    calculateVersionName = {
        def version = readVersionProperties()
        return "${version['major']}.${version['hotfix']}"
    }
    calculateVersionCode = {
        def version = readVersionProperties()
        def major = version['major'] as int
        def hotfix = version['hotfix'] as int
        return major * 100 + hotfix
    }
}

Properties readVersionProperties() {
    def versionFile = new File(project.rootDir.absolutePath + "/app/version.properties")
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if (!version['major']) version['major'] = "1"
    if (!version['hotfix']) version['hotfix'] = "0"
    return version
}

void incrementMajorNumber() {
    def versionFile = new File(project.rootDir.absolutePath + "/app/version.properties")

    def version = readVersionProperties()

    def major = version['major'] as int
    major++
    version['major'] = major.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

void incrementHotfixNumber() {
    def version = readVersionProperties()

    def hotfix = version['hotfix'] as int
    hotfix++
    version['hotfix'] = hotfix.toString()

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

task incrementVersion {
    description "Increments build counter in ${versionFile}"
    doFirst {
        incrementMajorNumber()
    }
}

if (plugins.hasPlugin('android') || plugins.hasPlugin('android-library')) {
    android {
        defaultConfig {
            versionName = calculateVersionName()
            versionCode = calculateVersionCode()
        }

        afterEvaluate {
            def autoIncrementVariant = { variant ->
                if (variant.buildType.name == buildTypes.release.name) {
                    // don't increment on debug builds
                    variant.preBuild.dependsOn incrementVersion
                    incrementVersion.doLast {
                        variant.mergedFlavor.versionName = calculateVersionName()
                        variant.mergedFlavor.versionCode = calculateVersionCode()
                    }
                }
            }
            if (plugins.hasPlugin('android')) {
                applicationVariants.all { variant -> autoIncrementVariant(variant) }
            }
            if (plugins.hasPlugin('android-library')) {
                libraryVariants.all { variant -> autoIncrementVariant(variant) }
            }
        }
    }
}